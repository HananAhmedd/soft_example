/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package se_proj;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jinzo78
 */
public class StockManager extends javax.swing.JDialog {

    /**
     * Creates new form ShopManager
     */
    public StockManager(java.awt.Frame parent, boolean modal) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        super(parent, modal);
        initComponents();
        //InitSQL();
        loadStock();
    }

    /*private Connection db;
    private Statement stmt;
    private ResultSet rs;
    
    private void InitSQL() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Class.forName("com.mysql.jdbc.Driver").newInstance();
        db = DriverManager.getConnection("jdbc:mysql://localhost/se_proj?user=stockman&password=stockman");
        stmt = (Statement) db.createStatement();
    }*/
    
    private void loadStock() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Globals.loadStock();
        ((DefaultTableModel)jTable1.getModel()).getDataVector().removeAllElements();
        for (Entry<Integer, StockItem> itm : Globals.getStockItems().entrySet())
        {
            ((DefaultTableModel)jTable1.getModel()).addRow(new Object[] {itm.getValue().getCodice(), itm.getValue().getNomeArticolo(), itm.getValue().getConsole(), itm.getValue().getQuantita()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnCaricaInMagazzino = new javax.swing.JButton();
        btnTrasferisciANegozio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codice articolo", "Nome", "Console", "Quantità"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnCaricaInMagazzino.setText("Carica in magazzino");
        btnCaricaInMagazzino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaricaInMagazzinoActionPerformed(evt);
            }
        });

        btnTrasferisciANegozio.setText("Trasferisci a negozio");
        btnTrasferisciANegozio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrasferisciANegozioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCaricaInMagazzino, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTrasferisciANegozio, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(btnCaricaInMagazzino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTrasferisciANegozio)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCaricaInMagazzinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaricaInMagazzinoActionPerformed
        try
        {
            String strCodice = new String(), strQuantita = new String();
            int codice, quantita;
            
            strCodice = JOptionPane.showInputDialog(null, "Digitare il codice dell'articolo che si desidera inserire in magazzino.");
            if (strCodice.isEmpty())
                return;
            else
                try
                {
                    codice = Integer.parseInt(strCodice);
                }
                catch (NumberFormatException nfe1)
                {
                    JOptionPane.showMessageDialog(null, "Il codice inserito non è valido.");
                    return;
                }
            
            strQuantita = JOptionPane.showInputDialog(null, "Digitare la quantità di prodotto da inserire in magazzino.");
            if (strQuantita.isEmpty())
                return;
            else
                try
                {
                    quantita = Integer.parseInt(strQuantita);
                }
                catch (NumberFormatException nfe2)
                {
                    JOptionPane.showMessageDialog(null, "La quantità inserita non è un numero.");
                    return;
                }
            
            /*Globals.getStatement().executeQuery("SELECT * FROM articoli WHERE Codice = " + codice + ";");
            Globals.updateRS();
            if (!Globals.getResultSet().next())
            {
                JOptionPane.showMessageDialog(null, "Il codice inserito non corrisponde a nessun articolo nel database.");
                return;
            }*/
            if (Globals.getArticles().get(codice) == null)
            {
                JOptionPane.showMessageDialog(null, "Il codice inserito non corrisponde a nessun articolo nel database.");
                return;
            }
            
            /*Globals.getStatement().executeQuery("SELECT * FROM magazzino WHERE Codice = " + codice + ";");
            Globals.updateRS();
            if (Globals.getResultSet().next())*/
            if (Globals.getStockItems().get(codice) != null)
            {
                Globals.getStockItems().get(codice).setQuantita((Globals.getStockItems().get(codice).getQuantita() + quantita));
                Globals.getStockItems().get(codice).Finalize();
            }
            else
            {
                Globals.getStatement().executeUpdate("INSERT INTO magazzino VALUES (" + codice + ", " + quantita + ");");
            }
            JOptionPane.showMessageDialog(null, "Operazione completata.");
            loadStock();
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnCaricaInMagazzinoActionPerformed

    public void trasferisciANegozio(int _codice, boolean ricevuta) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        int codice, quantita;
        String strQuantita = new String();

        if (_codice != -1)
            codice = _codice;
        else
        {
            String strCodice = new String();
            strCodice = JOptionPane.showInputDialog(null, "Digitare il codice dell'articolo che si desidera trasferire al negozio.");
            if (strCodice.isEmpty())
                return;
            else
                try
                {
                    codice = Integer.parseInt(strCodice);
                }
                catch (NumberFormatException nfe1)
                {
                    JOptionPane.showMessageDialog(null, "Il codice inserito non è valido.");
                    return;
                }
        }
        strQuantita = JOptionPane.showInputDialog(null, "Digitare la quantità di prodotto da trasferire al negozio.");
        if (strQuantita.isEmpty())
            return;
        else
            try
            {
                quantita = Integer.parseInt(strQuantita);
            }
            catch (NumberFormatException nfe2)
            {
                JOptionPane.showMessageDialog(null, "La quantità inserita non è un numero.");
                return;
            }

        /*Globals.getStatement().executeQuery("SELECT * FROM magazzino WHERE Codice = " + codice);
        Globals.updateRS();*/
        int quantitaInStock;
        if (Globals.getStockItems().get(codice) == null || Globals.getStockItems().get(codice).getQuantita() == 0)
        {
            JOptionPane.showMessageDialog(null, "Non ci sono scorte di questo articolo in magazzino o il codice inserito non corrisponde ad alcun articolo.");
            return;
        }
        else if (Globals.getStockItems().get(codice).getQuantita() < quantita)
        {
            JOptionPane.showMessageDialog(null, "Non ci sono scorte sufficienti in magazzino per soddisfare la richiesta.");
            return;
        }
        else
            quantitaInStock = Globals.getStockItems().get(codice).getQuantita();

        Globals.getStatement().executeQuery("SELECT * FROM negozio WHERE Codice = " + codice + " AND Usato = 0;");
        Globals.updateRS();
        if (Globals.getResultSet().next())
        {
            Globals.getStatement().executeUpdate("UPDATE negozio SET Quantita = " + (Globals.getResultSet().getInt("Quantita") + quantita) + " WHERE Codice = " + codice + " AND Usato = 0;");
        }
        else
        {
            String strPrezzo = new String();
            float prezzo;

            strPrezzo = JOptionPane.showInputDialog(null, "Digitare il prezzo per questi prodotti. (Utilizzare il punto come separatore decimale)");
            if (strPrezzo.isEmpty())
                return;
            else
                try
                {
                    prezzo = Float.parseFloat(strPrezzo);
                }
                catch (NumberFormatException nfe3)
                {
                    JOptionPane.showMessageDialog(null, "Il prezzo inserito non è valido.");
                    return;
                }
            Globals.getStatement().executeUpdate("INSERT INTO negozio (Codice, Quantita, Usato, Prezzo) VALUES (" + codice + ", " + quantita + ", 0, " + prezzo + ");");
        }
        Globals.getStatement().executeUpdate("UPDATE magazzino SET Quantita = " + (quantitaInStock - quantita) + " WHERE Codice = " + codice + ";");
        if (ricevuta)
            Globals.getStatement().executeUpdate("INSERT INTO ricevute_magazzino VALUES (" + codice + ", " + quantita + ", \"" + new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()) + "\");");
        JOptionPane.showMessageDialog(null, "Operazione completata.");
        loadStock();
    }
    
    private void btnTrasferisciANegozioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrasferisciANegozioActionPerformed
        try
        {
            this.trasferisciANegozio(-1, false);
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {}
    }//GEN-LAST:event_btnTrasferisciANegozioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                    StockManager dialog = new StockManager(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCaricaInMagazzino;
    private javax.swing.JButton btnTrasferisciANegozio;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
