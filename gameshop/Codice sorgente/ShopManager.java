/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package se_proj;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jinzo78
 */
public class ShopManager extends javax.swing.JDialog {

    /**
     * Creates new form ShopManager
     */
    /*private Connection db;
    private Statement stmt;
    private ResultSet rs;*/
    
    public ShopManager(java.awt.Frame parent, boolean modal) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        super(parent, modal);
        initComponents();
        //InitSQL();
        loadShop();
    }

    /*private void InitSQL() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Class.forName("com.mysql.jdbc.Driver").newInstance();
        db = DriverManager.getConnection("jdbc:mysql://localhost/se_proj?user=shopper&password=shopper");
        stmt = (Statement) db.createStatement();
    }*/
    
    private void loadShop() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Globals.loadShop();
        ((DefaultTableModel)jTable1.getModel()).getDataVector().removeAllElements();
        for (Entry<Integer, ShopItem> item : Globals.getShopItems().entrySet())
        {
            ((DefaultTableModel)jTable1.getModel()).addRow(new Object[] {item.getValue().getId(), item.getValue().getNomeArticolo(), item.getValue().getConsole(), item.getValue().getPrezzo(), item.getValue().getQuantita(), (item.getValue().getUsato() == 1)});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnCaricaDaMagazzino = new javax.swing.JButton();
        btnInserisciUsato = new javax.swing.JButton();
        btnScaricaProdotto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Console", "Prezzo", "Quantità", "Usato"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnCaricaDaMagazzino.setText("Carica da magazzino");
        btnCaricaDaMagazzino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaricaDaMagazzinoActionPerformed(evt);
            }
        });

        btnInserisciUsato.setText("Inserisci usato");
        btnInserisciUsato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserisciUsatoActionPerformed(evt);
            }
        });

        btnScaricaProdotto.setText("Scarica prodotto");
        btnScaricaProdotto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScaricaProdottoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCaricaDaMagazzino, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInserisciUsato, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnScaricaProdotto, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(btnCaricaDaMagazzino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInserisciUsato)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnScaricaProdotto)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCaricaDaMagazzinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaricaDaMagazzinoActionPerformed
        try
        {
            StockManager stockManager = new StockManager(null, false);
            stockManager.trasferisciANegozio(-1, true);
            stockManager.dispose();
            loadShop();
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnCaricaDaMagazzinoActionPerformed

    private void btnInserisciUsatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserisciUsatoActionPerformed
        try
        {
            int yesNo = JOptionPane.showConfirmDialog(null, "L'articolo da inserire è già presente nell'anagrafica degli articoli?", "Messaggio", JOptionPane.YES_NO_OPTION);
            int id;
            if (yesNo == JOptionPane.NO_OPTION)
            {
                EditArticle newArticle = new EditArticle();
                newArticle.setVisible(true);
                if (newArticle.getSearchedArticle() == null)
                    return;
                id = newArticle.getSearchedArticle().getCodice();
            }
            else
            {
                String strId = new String();
                strId = JOptionPane.showInputDialog(null, "Digitare il codice dell'articolo.");
                if (strId.isEmpty())
                    return;
                else
                    try
                    {
                        id = Integer.parseInt(strId);
                    }
                    catch (NumberFormatException nfe1)
                    {
                        JOptionPane.showMessageDialog(null, "Il codice inserito non è valido.");
                        return;
                    }
                if (Globals.getArticles().get(id) == null)
                {
                    JOptionPane.showMessageDialog(null, "Il codice inserito non esiste nell'anagrafica degli articoli.");
                    return;
                }  
            }
            
            String strPrezzo = new String();
            float prezzo;
            strPrezzo = JOptionPane.showInputDialog(null, "Digitare il prezzo del prodotto. (Usare il punto come separatore decimale e inserire SOLO numeri)");
            if (strPrezzo.isEmpty())
                return;
            else
                try
                {
                    prezzo = Float.parseFloat(strPrezzo);
                }
                catch (NumberFormatException nfe2)
                {
                    JOptionPane.showMessageDialog(null, "Il prezzo inserito non è valido.");
                    return;
                }
            Globals.getStatement().executeUpdate("INSERT INTO negozio (Codice, Quantita, Usato, Prezzo) VALUES (" + id + ", 1, 1, " + prezzo + ");");
            JOptionPane.showMessageDialog(null, "Operazione completata.");
            loadShop();
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnInserisciUsatoActionPerformed

    private void btnScaricaProdottoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScaricaProdottoActionPerformed
        try
        {
            String strId = new String();
            int id;
            strId = JOptionPane.showInputDialog(null, "Digitare l'ID (prima colonna a sinistra) del prodotto da scaricare.");
            if (strId.isEmpty())
                return;
            else
                try
                {
                    id = Integer.parseInt(strId);
                }
                catch (NumberFormatException nfe1)
                {
                    JOptionPane.showMessageDialog(null, "L'ID inserito non è valido.");
                    return;
                }
            /*Globals.getStatement().executeQuery("SELECT * FROM negozio WHERE ID = " + id);
            Globals.updateRS();
            if (!Globals.getResultSet().next())
            {
                JOptionPane.showMessageDialog(null, "L'ID inserito non esiste in negozio.");
                return;
            }*/
            if (Globals.getShopItems().get(id) == null)
            {
                JOptionPane.showMessageDialog(null, "L'ID inserito non esiste in negozio.");
                return;
            }    
            else
            {
                if (Globals.getShopItems().get(id).getQuantita() == 1 && Globals.getShopItems().get(id).getUsato() == 1)
                {
                    Globals.getShopItems().get(id).Delete();
                }
                else
                {
                    String strQuantita = new String();
                    int quantita;
                    strQuantita = JOptionPane.showInputDialog(null, "Digitare la quantità di prodotto da scaricare.");
                    if (strQuantita.isEmpty())
                        return;
                    else
                        try
                        {
                            quantita = Integer.parseInt(strQuantita);
                        }
                        catch (NumberFormatException nfe2)
                        {
                            JOptionPane.showMessageDialog(null, "La quantità inserita non è un numero.");
                            return;
                        }
                    int newQuantita = Globals.getResultSet().getInt("Quantita") - quantita;
                    if (newQuantita < 0)
                    {
                        JOptionPane.showMessageDialog(null, "Numero di pezzi da scaricare troppo grande.");
                        return;
                    }
                    //Globals.getStatement().executeUpdate("UPDATE negozio SET Quantita = " + newQuantita + " WHERE ID = " + id + ";");
                    Globals.getShopItems().get(id).setQuantita(newQuantita);
                    Globals.getShopItems().get(id).Finalize();
                    if (newQuantita <= 3)
                    {
                        int yesNo = JOptionPane.showConfirmDialog(null, "La soglia minima per il prodotto è stata raggiunta. Si desidera ordinare altri pezzi?", "Messaggio", JOptionPane.YES_NO_OPTION);
                        if (yesNo == JOptionPane.YES_OPTION)
                        {
                            StockManager stockManager = new StockManager(null, false);
                            stockManager.trasferisciANegozio(Globals.getShopItems().get(id).getCodice(), true);
                            stockManager.dispose();
                        }
                    }
                }
                JOptionPane.showMessageDialog(null, "Operazione completata.");
                loadShop();
            }
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnScaricaProdottoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                    ShopManager dialog = new ShopManager(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCaricaDaMagazzino;
    private javax.swing.JButton btnInserisciUsato;
    private javax.swing.JButton btnScaricaProdotto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
