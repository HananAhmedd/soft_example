/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package se_proj;
import java.sql.*;
import java.text.*;
import java.util.Map.Entry;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jinzo78
 */
public class ReservationsManager extends javax.swing.JDialog {

    /**
     * Creates new form ReservationsManager
     */
    public ReservationsManager(java.awt.Frame parent, boolean modal) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        super(parent, modal);
        initComponents();
        //InitSQL();
        loadReservations();
    }

    /*private Connection db;
    private Statement stmt;
    private ResultSet rs;
    
    private void InitSQL() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Class.forName("com.mysql.jdbc.Driver").newInstance();
        db = DriverManager.getConnection("jdbc:mysql://localhost/se_proj?user=reserver&password=reserver");
        stmt = (Statement) db.createStatement();
    }*/
    
    private void loadReservations() throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        Globals.loadReservations();
        ((DefaultTableModel)jTable1.getModel()).getDataVector().removeAllElements();
        for (Entry<Integer, Reservation> res : Globals.getReservations().entrySet())
        {
            ((DefaultTableModel)jTable1.getModel()).addRow(new Object[] {res.getValue().getId(), res.getValue().getNomeArticolo(), res.getValue().getAcconto(), (res.getValue().getTotale() - res.getValue().getAcconto()), res.getValue().getDataConsegna(), (res.getValue().getNome() + " " + res.getValue().getCognome()), res.getValue().getTelefono()});
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnCreaPrenotazione = new javax.swing.JButton();
        btnCancellaPrenotazione = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID prenotazione", "Nome articolo", "Acconto", "Saldo", "Data consegna", "Nome", "Telefono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnCreaPrenotazione.setText("Aggiungi prenotazione");
        btnCreaPrenotazione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreaPrenotazioneActionPerformed(evt);
            }
        });

        btnCancellaPrenotazione.setText("Cancella prenotazione");
        btnCancellaPrenotazione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancellaPrenotazioneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreaPrenotazione, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancellaPrenotazione, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(btnCreaPrenotazione)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancellaPrenotazione)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreaPrenotazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreaPrenotazioneActionPerformed
        try
        {
            int yesNo = JOptionPane.showConfirmDialog(null, "L'articolo che si desidera preordinare è già presente nell'anagrafica degli articoli?", "Messaggio", JOptionPane.YES_NO_OPTION);
            int id = 0;
            if (yesNo == JOptionPane.NO_OPTION)
            {
                EditArticle newArticle = new EditArticle();
                newArticle.setVisible(true);
                if (newArticle.getSearchedArticle() == null)
                    return;
                id = newArticle.getSearchedArticle().getCodice();
            }
            else
            {
                String strId = new String();
                strId = JOptionPane.showInputDialog(null, "Digitare il codice dell'articolo.");
                if (strId.isEmpty())
                    return;
                else
                    try
                    {
                        id = Integer.parseInt(strId);
                    }
                    catch (NumberFormatException nfe1)
                    {
                        JOptionPane.showMessageDialog(null, "Il codice inserito non è valido.");
                        return;
                    }
                Article isThere = new Article("Codice = " + id);
                if (!isThere.getInitialized())
                {
                    JOptionPane.showMessageDialog(null, "Il codice inserito non esiste nell'anagrafica degli articoli.");
                    return;
                }
            }
            
            String strAcconto = new String(), strTotale = new String();
            float acconto, totale;
            
            strAcconto = JOptionPane.showInputDialog(null, "Digitare l'acconto. (Usare il punto come separatore decimale e inserire SOLO numeri)");
            if (strAcconto.isEmpty())
                return;
            else
                try
                {
                    acconto = Float.parseFloat(strAcconto);
                }
                catch (NumberFormatException nfe2)
                {
                    JOptionPane.showMessageDialog(null, "L'acconto inserito non è valido.");
                    return;
                }
            
            strTotale = JOptionPane.showInputDialog(null, "Digitare il prezzo totale. (Usare il punto come separatore decimale e inserire SOLO numeri)");
            if (strTotale.isEmpty())
                return;
            else
                try
                {
                    totale = Float.parseFloat(strTotale);
                }
                catch (NumberFormatException nfe3)
                {
                    JOptionPane.showMessageDialog(null, "Il totale inserito non è valido.");
                    return;
                }
            
            String nome = new String(), cognome = new String();
            
            nome = JOptionPane.showInputDialog(null, "Digitare il nome del cliente.");
            if (nome.isEmpty())
                return;
            cognome = JOptionPane.showInputDialog(null, "Digitare il cognome del cliente.");
            if (cognome.isEmpty())
                return;
            
            String telefono = new String();
            telefono = JOptionPane.showInputDialog(null, "Digitare il numero di telefono del cliente.");
            if (telefono.isEmpty())
                return;
            
            String strDataConsegna = new String();
            strDataConsegna = JOptionPane.showInputDialog(null, "Digitare la data di consegna dell'articolo. (Formato: aaaa-mm-gg)");
            if (strDataConsegna.isEmpty())
                return;
               
            Reservation res = new Reservation();
            res.setNome(nome);
            res.setCognome(cognome);
            res.setTelefono(telefono);
            res.setDataConsegna(strDataConsegna);
            res.setAcconto(acconto);
            res.setTotale(totale);
            res.setCodiceProdotto(id);
            res.Finalize();
            //stmt.executeUpdate("INSERT INTO prenotazioni (Nome, Cognome, Telefono, DataConsegna, Acconto, Totale, CodiceProdotto) VALUES (\"" + nome + "\", \"" + cognome + "\", \"" + telefono + "\", \"" + strDataConsegna + "\", \"" + acconto + "\", \"" + totale + "\", \"" + id + "\");");
            JOptionPane.showMessageDialog(null, "Operazione completata.");
            loadReservations();
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnCreaPrenotazioneActionPerformed

    private void btnCancellaPrenotazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancellaPrenotazioneActionPerformed
        try
        {
            String strId = new String();
            int id;
            
            strId = JOptionPane.showInputDialog(null, "Digitare il codice della prenotazione.");
            if (strId.isEmpty())
                return;
            else
                try
                {
                    id = Integer.parseInt(strId);
                }
                catch (NumberFormatException nfe1)
                {
                    JOptionPane.showMessageDialog(null, "Il codice inserito non è valido.");
                    return;
                }
            /*stmt.executeQuery("SELECT * FROM prenotazioni WHERE ID = " + id + ";");
            rs = stmt.getResultSet();*/
            Reservation res = new Reservation("ID = " + id);
            if (!res.getInitialized())
            {
                JOptionPane.showMessageDialog(null, "Il codice inserito non corrisponde ad alcuna prenotazione.");
                return;
            }
            
            int yesNo = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler cancellare la prenotazione?", "Messaggio", JOptionPane.YES_NO_OPTION);
            if (yesNo == JOptionPane.NO_OPTION) return;
            res.Delete();
            JOptionPane.showMessageDialog(null, "Prenotazione cancellata.");
            loadReservations();
        } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {JOptionPane.showMessageDialog(null, e.getMessage());}
    }//GEN-LAST:event_btnCancellaPrenotazioneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                    ReservationsManager dialog = new ReservationsManager(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {}
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancellaPrenotazione;
    private javax.swing.JButton btnCreaPrenotazione;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
